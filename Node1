{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOJoDOvbFmnVQjK5ddj5LU/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rome0607/IoT-based-Eco-Harvest-Smart-Green-House-Agriculture-Surveillance-System/blob/main/Node1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bBYZ9eLI88HV"
      },
      "outputs": [],
      "source": [
        "#include <WiFi.h>\n",
        "#include <esp_now.h>\n",
        "#include <DHT.h>\n",
        "\n",
        "#define DHTPIN 5       //GPIO 5 is connected to the DHT sensor\n",
        "#define DHTTYPE DHT22  //DHT 22(AM2302, AM2301)\n",
        "#define Aout_Moisture A3\n",
        "\n",
        "#define TempPin1 1  //GPIO pin, check the pin number an dfunction of your board\n",
        "#define LightPin1 2\n",
        "\n",
        "#define TempPin2 7  //GPIO pin, check the pin number an dfunction of your board\n",
        "#define LightPin2 8\n",
        "\n",
        "DHT dht(DHTPIN, DHTTYPE);\n",
        "\n",
        "// Replace with the MAC address of the receiver ESP32S3 board\n",
        "uint8_t broadcastAddress[] = { 0x34, 0x85, 0x18, 0x91, 0xC6, 0xE0 };  //34:85:18:8E:29:18 60B: 34:85:18:AC:BD:6C  59A: 0x34, 0x85, 0x18, 0x91, 0x30, 0xA4\n",
        "\n",
        "typedef struct struct_message {\n",
        "\n",
        "  int id;\n",
        "  float b;  // humidity\n",
        "  float c;  // temprature\n",
        "  float d;  // Moisture\n",
        "  float e;  // H\n",
        "  float f;\n",
        "  float g;  // R\n",
        "  float h;\n",
        "} struct_message;\n",
        "\n",
        "typedef struct requestmessage {\n",
        "  char* text;\n",
        "} requestmessage;\n",
        "/*------------------ CRC-8 Calculation-----------------------*/\n",
        "// CRC-8 lookup table for polynomial 0x8C (reverse of 0x31)\n",
        "const uint8_t crc8_table[256] = {\n",
        "  0x00, 0x8C, 0x94, 0x18, 0xA4, 0x28, 0x30, 0xBC, 0xC4, 0x48, 0x50, 0xDC, 0x60, 0xEC, 0xF4, 0x78,\n",
        "  0x04, 0x88, 0x90, 0x1C, 0xA0, 0x2C, 0x34, 0xB8, 0xC0, 0x4C, 0x54, 0xD8, 0x64, 0xE8, 0xF0, 0x7C,\n",
        "  0x08, 0x84, 0x9C, 0x10, 0xAC, 0x20, 0x38, 0xB4, 0xCC, 0x40, 0x58, 0xD4, 0x68, 0xE4, 0xFC, 0x70,\n",
        "  0x0C, 0x80, 0x98, 0x14, 0xA8, 0x24, 0x3C, 0xB0, 0xC8, 0x44, 0x5C, 0xD0, 0x6C, 0xE0, 0xF8, 0x74,\n",
        "  0x10, 0x9C, 0x84, 0x08, 0xB4, 0x38, 0x20, 0xAC, 0xD4, 0x58, 0x40, 0xCC, 0x70, 0xFC, 0xE4, 0x68,\n",
        "  0x14, 0x98, 0x80, 0x0C, 0xB0, 0x3C, 0x24, 0xA8, 0xD0, 0x5C, 0x44, 0xC8, 0x74, 0xF8, 0xE0, 0x6C,\n",
        "  0x18, 0x94, 0x8C, 0x00, 0xBC, 0x30, 0x28, 0xA4, 0xDC, 0x50, 0x48, 0xC4, 0x78, 0xF4, 0xEC, 0x60,\n",
        "  0x1C, 0x90, 0x88, 0x04, 0xB8, 0x34, 0x2C, 0xA0, 0xD8, 0x54, 0x4C, 0xC0, 0x7C, 0xF0, 0xE8, 0x64,\n",
        "  0x20, 0xAC, 0xB4, 0x38, 0x84, 0x08, 0x10, 0x9C, 0xE4, 0x68, 0x70, 0xFC, 0x40, 0xCC, 0xD4, 0x58,\n",
        "  0x24, 0xA8, 0xB0, 0x3C, 0x80, 0x0C, 0x14, 0x98, 0xE0, 0x6C, 0x74, 0xF8, 0x44, 0xC8, 0xD0, 0x5C,\n",
        "  0x28, 0xA4, 0xBC, 0x30, 0x8C, 0x00, 0x18, 0x94, 0xEC, 0x60, 0x78, 0xF4, 0x48, 0xC4, 0xDC, 0x50,\n",
        "  0x2C, 0xA0, 0xB8, 0x34, 0x88, 0x04, 0x1C, 0x90, 0xE8, 0x64, 0x7C, 0xF0, 0x4C, 0xC0, 0xD8, 0x54,\n",
        "  0x30, 0xBC, 0xA4, 0x28, 0x94, 0x18, 0x00, 0x8C, 0xF4, 0x78, 0x60, 0xEC, 0x50, 0xDC, 0xC4, 0x48,\n",
        "  0x34, 0xB8, 0xA0, 0x2C, 0x90, 0x1C, 0x04, 0x88, 0xF0, 0x7C, 0x64, 0xE8, 0x54, 0xD8, 0xC0, 0x4C,\n",
        "  0x38, 0xB4, 0xAC, 0x20, 0x9C, 0x10, 0x08, 0x84, 0xFC, 0x70, 0x68, 0xE4, 0x58, 0xD4, 0xCC, 0x40,\n",
        "  0x3C, 0xB0, 0xA8, 0x24, 0x98, 0x14, 0x0C, 0x80, 0xF8, 0x74, 0x6C, 0xE0, 0x5C, 0xD0, 0xC8, 0x44\n",
        "};\n",
        "// Function to calculate CRC-8\n",
        "uint8_t calculateCRC8(const void* data, size_t length) {\n",
        "  uint8_t crc = 0;\n",
        "  uint8_t* buffer = (uint8_t*)data;\n",
        "\n",
        "  for (size_t i = 0; i < length; i++) {\n",
        "    crc = crc8_table[crc ^ buffer[i]];\n",
        "  }\n",
        "\n",
        "  return crc;\n",
        "}\n",
        "// Create a struct_message called myData\n",
        "struct_message myData; // sending message\n",
        "requestmessage incomingData; // received message\n",
        "\n",
        "\n",
        "esp_now_peer_info_t peerInfo;\n",
        "\n",
        "// callback when data is sent\n",
        "void OnDataSent(const uint8_t* mac_addr, esp_now_send_status_t status) {\n",
        "  Serial.print(\"\\rLast Packet Send Status:\\t\");\n",
        "  Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n",
        "  Serial.println(\" \");\n",
        "}\n",
        "\n",
        "void OnDataRecv(const uint8_t* mac, const uint8_t* incomingData, int len) {\n",
        "  memcpy(&incomingData, incomingData, sizeof(incomingData));\n",
        "  Serial.println(\"Request received\");\n",
        "\n",
        "  float h = dht.readHumidity();\n",
        "  float t = dht.readTemperature();\n",
        "  int moisture = analogRead(Aout_Moisture);\n",
        "\n",
        "  int sensorValue_tm1 = analogRead(TempPin1);\n",
        "  int sensorValue_op1 = analogRead(LightPin1);\n",
        "  float voltage_tm1 = sensorValue_tm1 * (3.3 / 4096.0);\n",
        "  float voltage_op1 = sensorValue_op1 * (3.3 / 4096.0);\n",
        "  float Lux1 = ((-344.63*voltage_op1)+746.8);\n",
        "  float Temp1 = ((-59.173*voltage_tm1)+67.11);\n",
        "\n",
        "\n",
        "  int sensorValue_tm2 = analogRead(TempPin2);\n",
        "  int sensorValue_op2 = analogRead(LightPin2);\n",
        "  float voltage_tm2 = sensorValue_tm2 * (3.3 / 4096.0);\n",
        "  float voltage_op2 = sensorValue_op2 * (3.3 / 4096.0);\n",
        "  float Lux2 = ((219.89*voltage_op2)-13.504);\n",
        "  float Temp2 = (64.574-(22.34*voltage_tm2));\n",
        "\n",
        "\n",
        "\n",
        "  myData.id = 1;\n",
        "  myData.b = h;\n",
        "  myData.c = t;\n",
        "  myData.d = moisture;\n",
        "  myData.e = Lux1;\n",
        "  myData.f = Temp1;\n",
        "  myData.g = Lux2;\n",
        "  myData.h = Temp2;\n",
        "\n",
        "  //Calculate CRC\n",
        "  uint8_t CRC = calculateCRC8(&myData, sizeof(myData));\n",
        "  // Send data including CRC using ESP-NOW\n",
        "  uint8_t dataToSend[sizeof(myData) + 1];\n",
        "  memcpy(dataToSend, &myData, sizeof(myData));\n",
        "  dataToSend[sizeof(myData)] = CRC;\n",
        "\n",
        "\n",
        "  // Send message via ESP-NOW\n",
        "  esp_err_t result = esp_now_send(broadcastAddress, dataToSend, sizeof(dataToSend));\n",
        "\n",
        "  if (result == ESP_OK) {\n",
        "    Serial.println(\" Sent with success\");\n",
        "    Serial.print(\"Calculated CRC: \");\n",
        "    Serial.println(dataToSend[sizeof(myData)]);\n",
        "    Serial.print(F(\"Humidity: \"));\n",
        "    Serial.print(h);\n",
        "    Serial.print(F(\"%  Temperature: \"));\n",
        "    Serial.print(t);\n",
        "    Serial.println(F(\"C \"));\n",
        "    Serial.print(F(\"Moisture :\"));\n",
        "    Serial.println(moisture);\n",
        "    Serial.print(F(\"Lux1 : \"));\n",
        "    Serial.println(Lux1);\n",
        "    Serial.print(F(\"  Temp1 \"));\n",
        "    Serial.println(Temp1);\n",
        "    Serial.print(F(\"Lux2 : \"));\n",
        "    Serial.println(Lux2);\n",
        "    Serial.print(F(\"  Temp2 \"));\n",
        "    Serial.println(Temp2);\n",
        "  }\n",
        "  else\n",
        "  {\n",
        "    Serial.println(\"Error sending the data\");\n",
        "  }\n",
        "}\n",
        "\n",
        "void setup() {\n",
        "  // Init Serial Monitor\n",
        "  Serial.begin(115200);\n",
        "  dht.begin();\n",
        "\n",
        "  // Set device as a Wi-Fi Station\n",
        "  WiFi.mode(WIFI_STA);\n",
        "\n",
        "  // Init ESP-NOW\n",
        "  if (esp_now_init() != ESP_OK) {\n",
        "    Serial.println(\"Error initializing ESP-NOW\");\n",
        "    return;\n",
        "  }\n",
        "\n",
        "  // Once ESPNow is successfully Init, we will register for Send CB to\n",
        "  // get the status of Trasnmitted packet\n",
        "  esp_now_register_send_cb(OnDataSent);\n",
        "  esp_now_register_recv_cb(OnDataRecv);\n",
        "\n",
        "  // Register peer\n",
        "  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n",
        "  peerInfo.channel = 0;\n",
        "  peerInfo.encrypt = false;\n",
        "\n",
        "  // Add peer\n",
        "  if (esp_now_add_peer(&peerInfo) != ESP_OK) {\n",
        "    Serial.println(\"Failed to add peer\");\n",
        "    return;\n",
        "  }\n",
        "}\n",
        "\n",
        "void loop() {\n",
        "}"
      ]
    }
  ]
}